import {
  IUserVoiceChannelStatusRecordsRepository,
  IUserVoiceChannelStatusRecordsRepositorySymbol,
} from '@domain/voice-channel-status-records/IUserVoiceChannelStatusRecordsRepository';
import { VoiceChannelStatusRecord } from '@domain/voice-channel-status-records/VoiceChannelStatusRecord';
import { Inject, Injectable, Logger } from '@nestjs/common';
import { SaveUserVoiceChannelStatusCommand } from './SaveUserVoiceChannelStatusCommand';

@Injectable()
export class SaveUserVoiceChannelStatusCommandHandler {
  private readonly logger: Logger = new Logger(
    SaveUserVoiceChannelStatusCommandHandler.name,
  );

  constructor(
    @Inject(IUserVoiceChannelStatusRecordsRepositorySymbol)
    private readonly repository: IUserVoiceChannelStatusRecordsRepository,
  ) {}

  async handle(command: SaveUserVoiceChannelStatusCommand): Promise<void> {
    this.logger.log(
      `Saving voice channel status for user ${command.guildMemberId} in guild ${command.guildId}.`,
    );

    const record = VoiceChannelStatusRecord.create(
      undefined, // ID will be generated by the repository
      command.guildId,
      command.guildMemberId,
      command.fromChannelId,
      command.toChannelId,
      new Date(),
    );

    await this.repository.save(record);

    this.logger.log(
      `Successfully saved voice channel status for user ${command.guildMemberId} in guild ${command.guildId}.`,
    );
  }
}
